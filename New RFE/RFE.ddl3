DROP SEQUENCE F15_A3_Auth_seq ; 
create sequence F15_A3_Auth_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15_A3_Auth_PK_trig 
before insert on F15_A3_Auth
for each row 
begin 
select F15_A3_Auth_seq.nextval into :new.auth_id from dual; 
end; 
/
alter table F15_A3_Auth add created date ; 
alter table F15_A3_Auth add created_by VARCHAR2 (255) ; 
alter table F15_A3_Auth add row_version_number integer ; 
alter table F15_A3_Auth add updated date ; 
alter table F15_A3_Auth add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15_A3_Auth_AUD_trig 
before insert or update on F15_A3_Auth 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15_A3_Contact_seq ; 
create sequence F15_A3_Contact_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15_A3_Contact_PK_trig 
before insert on F15_A3_Contact
for each row 
begin 
select F15_A3_Contact_seq.nextval into :new.contact_id from dual; 
end; 
/
alter table F15_A3_Contact add created date ; 
alter table F15_A3_Contact add created_by VARCHAR2 (255) ; 
alter table F15_A3_Contact add row_version_number integer ; 
alter table F15_A3_Contact add updated date ; 
alter table F15_A3_Contact add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15_A3_Contact_AUD_trig 
before insert or update on F15_A3_Contact 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15_A3_Emp_seq ; 
create sequence F15_A3_Emp_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15_A3_Emp_PK_trig 
before insert on F15_A3_Emp
for each row 
begin 
select F15_A3_Emp_seq.nextval into :new.employee_id from dual; 
end; 
/
alter table F15_A3_Emp add created date ; 
alter table F15_A3_Emp add created_by VARCHAR2 (255) ; 
alter table F15_A3_Emp add row_version_number integer ; 
alter table F15_A3_Emp add updated date ; 
alter table F15_A3_Emp add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15_A3_Emp_AUD_trig 
before insert or update on F15_A3_Emp 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15_A3_Lab_seq ; 
create sequence F15_A3_Lab_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15_A3_Lab_PK_trig 
before insert on F15_A3_Lab
for each row 
begin 
select F15_A3_Lab_seq.nextval into :new.lab_id from dual; 
end; 
/
alter table F15_A3_Lab add created date ; 
alter table F15_A3_Lab add created_by VARCHAR2 (255) ; 
alter table F15_A3_Lab add row_version_number integer ; 
alter table F15_A3_Lab add updated date ; 
alter table F15_A3_Lab add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15_A3_Lab_AUD_trig 
before insert or update on F15_A3_Lab 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15_A3_RFE_seq ; 
create sequence F15_A3_RFE_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15_A3_RFE_PK_trig 
before insert on F15_A3_RFE
for each row 
begin 
select F15_A3_RFE_seq.nextval into :new.rfe_id from dual; 
end; 
/
alter table F15_A3_RFE add created date ; 
alter table F15_A3_RFE add created_by VARCHAR2 (255) ; 
alter table F15_A3_RFE add row_version_number integer ; 
alter table F15_A3_RFE add updated date ; 
alter table F15_A3_RFE add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15_A3_RFE_AUD_trig 
before insert or update on F15_A3_RFE 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15_A3_RFE_Doc_seq ; 
create sequence F15_A3_RFE_Doc_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15_A3_RFE_Doc_PK_trig 
before insert on F15_A3_RFE_Doc
for each row 
begin 
select F15_A3_RFE_Doc_seq.nextval into :new.document_id from dual; 
end; 
/
alter table F15_A3_RFE_Doc add created date ; 
alter table F15_A3_RFE_Doc add created_by VARCHAR2 (255) ; 
alter table F15_A3_RFE_Doc add row_version_number integer ; 
alter table F15_A3_RFE_Doc add updated date ; 
alter table F15_A3_RFE_Doc add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15_A3_RFE_Doc_AUD_trig 
before insert or update on F15_A3_RFE_Doc 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15_A3_RFE_S_seq ; 
create sequence F15_A3_RFE_S_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15_A3_RFE_S_PK_trig 
before insert on F15_A3_RFE_S
for each row 
begin 
select F15_A3_RFE_S_seq.nextval into :new.status_id from dual; 
end; 
/
alter table F15_A3_RFE_S add created date ; 
alter table F15_A3_RFE_S add created_by VARCHAR2 (255) ; 
alter table F15_A3_RFE_S add row_version_number integer ; 
alter table F15_A3_RFE_S add updated date ; 
alter table F15_A3_RFE_S add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15_A3_RFE_S_AUD_trig 
before insert or update on F15_A3_RFE_S 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15_A3_RFE_SC_seq ; 
create sequence F15_A3_RFE_SC_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15_A3_RFE_SC_PK_trig 
before insert on F15_A3_RFE_SC
for each row 
begin 
select F15_A3_RFE_SC_seq.nextval into :new.status_code from dual; 
end; 
/
alter table F15_A3_RFE_SC add created date ; 
alter table F15_A3_RFE_SC add created_by VARCHAR2 (255) ; 
alter table F15_A3_RFE_SC add row_version_number integer ; 
alter table F15_A3_RFE_SC add updated date ; 
alter table F15_A3_RFE_SC add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15_A3_RFE_SC_AUD_trig 
before insert or update on F15_A3_RFE_SC 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15_A3_RFE_TC_seq ; 
create sequence F15_A3_RFE_TC_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15_A3_RFE_TC_PK_trig 
before insert on F15_A3_RFE_TC
for each row 
begin 
select F15_A3_RFE_TC_seq.nextval into :new.comment_id from dual; 
end; 
/
alter table F15_A3_RFE_TC add created date ; 
alter table F15_A3_RFE_TC add created_by VARCHAR2 (255) ; 
alter table F15_A3_RFE_TC add row_version_number integer ; 
alter table F15_A3_RFE_TC add updated date ; 
alter table F15_A3_RFE_TC add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15_A3_RFE_TC_AUD_trig 
before insert or update on F15_A3_RFE_TC 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15_A3_RFE_Task_seq ; 
create sequence F15_A3_RFE_Task_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15_A3_RFE_Task_PK_trig 
before insert on F15_A3_RFE_Task
for each row 
begin 
select F15_A3_RFE_Task_seq.nextval into :new.task_id from dual; 
end; 
/
alter table F15_A3_RFE_Task add created date ; 
alter table F15_A3_RFE_Task add created_by VARCHAR2 (255) ; 
alter table F15_A3_RFE_Task add row_version_number integer ; 
alter table F15_A3_RFE_Task add updated date ; 
alter table F15_A3_RFE_Task add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15_A3_RFE_Task_AUD_trig 
before insert or update on F15_A3_RFE_Task 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15_A3_RTC_seq ; 
create sequence F15_A3_RTC_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15_A3_RTC_PK_trig 
before insert on F15_A3_RTC
for each row 
begin 
select F15_A3_RTC_seq.nextval into :new.role_code from dual; 
end; 
/
alter table F15_A3_RTC add created date ; 
alter table F15_A3_RTC add created_by VARCHAR2 (255) ; 
alter table F15_A3_RTC add row_version_number integer ; 
alter table F15_A3_RTC add updated date ; 
alter table F15_A3_RTC add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15_A3_RTC_AUD_trig 
before insert or update on F15_A3_RTC 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP INDEX F15_A3_Emp_employee_id_FK_0 ;
CREATE INDEX F15_A3_Emp_employee_id_FK_0 ON F15_A3_Auth(F15_A3_Emp_employee_id) ;
DROP INDEX F15_A3_Emp_employee_id_FK_1 ;
CREATE INDEX F15_A3_Emp_employee_id_FK_1 ON F15_A3_Contact(F15_A3_Emp_employee_id) ;
DROP INDEX F15_A3_RFE_rfe_id_FK_2 ;
CREATE INDEX F15_A3_RFE_rfe_id_FK_2 ON F15_A3_Contact(F15_A3_RFE_rfe_id) ;
DROP INDEX F15_A3_RTC_role_code_FK_3 ;
CREATE INDEX F15_A3_RTC_role_code_FK_3 ON F15_A3_Contact(F15_A3_RTC_role_code) ;
DROP INDEX F15_A3_Lab_lab_id_FK_4 ;
CREATE INDEX F15_A3_Lab_lab_id_FK_4 ON F15_A3_Emp(F15_A3_Lab_lab_id) ;
DROP INDEX F15_A3_RFE_rfe_id_FK_5 ;
CREATE INDEX F15_A3_RFE_rfe_id_FK_5 ON F15_A3_RFE_Doc(F15_A3_RFE_rfe_id) ;
DROP INDEX F15_A3_RFE_S_status_id_FK_6 ;
CREATE INDEX F15_A3_RFE_S_status_id_FK_6 ON F15_A3_RFE(F15_A3_RFE_S_status_id) ;
DROP INDEX F15_A3_RFE_rfe_id_FK_7 ;
CREATE INDEX F15_A3_RFE_rfe_id_FK_7 ON F15_A3_RFE_S(F15_A3_RFE_rfe_id) ;
DROP INDEX F15_A3_RFE_SC_status_c_FK_8 ;
CREATE INDEX F15_A3_RFE_SC_status_c_FK_8 ON F15_A3_RFE_S(F15_A3_RFE_SC_status_code) ;
DROP INDEX F15_A3_RFE_rfe_id_FK_9 ;
CREATE INDEX F15_A3_RFE_rfe_id_FK_9 ON F15_A3_RFE_TC(F15_A3_RFE_rfe_id) ;
DROP INDEX F15_A3_RFE_rfe_id_FK_10 ;
CREATE INDEX F15_A3_RFE_rfe_id_FK_10 ON F15_A3_RFE_Task(F15_A3_RFE_rfe_id) ;
